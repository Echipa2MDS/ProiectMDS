Depanare si iar depanare 

Depanarea este procesul de g캒sire 탳i eliminare a erorilor de pe un program software. Erorile apar 칥n programe c칙nd o linie de cod sau o declara탵ie intr캒 칥n conflict cu alte elemente ale codului.  Programarea este un proces complex. Deoarece este o munc캒 uman캒, pot ap캒rea adesea erori. Cauza unei erori este adesea un conflict 칥n software atunci c칙nd se 칥ncearc캒 ca diferite aplica탵ii s캒 func탵ioneze 칥mpreun캒. Erorile de programare sunt cele mai frecvente erori 탳i procesul de g캒sire 탳i corectare a acestora se nume탳te depanare. Exist캒 trei tipuri de erori 칥ntr-un program: erori de sintax캒, erori de rulare 탳i erori semantice. Este util s캒 facem aceast캒 distinc탵ie, astfel 칥nc칙t s캒 putem g캒si erorile mai repede. 

Tradi탵ia spune c캒 primul bug al computerului a fost un adev캒rat bug. 칉n 1945, la Harvard, o molie 칥ntre dou캒 relee electrice ale calculatorului Mark II Aiken Relay Calculator a oprit 칥ntreaga ma탳in캒.  

Pentru programator, depanarea este mai dificil캒 pentru sistemele complexe, mai ales c칙nd diferite subsisteme sunt str칙ns legate, deoarece schimb캒rile 칥ntr-o aplica탵ie sau o interfa탵캒 칥ntr-un alt sistem pot provoca traversarea unor bug-uri dificile. Uneori este nevoie de mai mult timp pentru a depana un program dec칙t pentru al cripta. 칉n timpul procesului de depanare (adic캒 de testare), programele complete sunt regulat codificate 탳i executate special pentru a diagnostica problemele. Aplica탵iile mari, care con탵in milioane de linii de cod ale programului, sunt 칥mp캒r탵ite 칥n p캒r탵i mici. Este eficient s캒 testa탵i 탳i s캒 depana탵i fiecare parte mai 칥nt칙i individual, urmat캒 de aplica탵ie 칥n ansamblu. 

Dac캒 ar trebui s캒 depaneze manual, programatorul trebuie s캒 ajusteze programul. 칉n acest fel, el poate opri programele 칥n anumite puncte 탳i poate citi variabilele. Cu o aplica탵ie mare acest lucru este imposibil, din fericire el prime탳te ajutor de la debugger. Majoritatea depanatoarelor folosesc simulatoare de seturi de instruc탵iuni. Spre deosebire de rularea unui program direct pe procesor, un simulator atinge un nivel mai ridicat de control asupra execu탵iei. Programatorul poate folosi simulatorul pentru a opri sau rula programul de depanare 칥n func탵ie de circumstan탵e specifice. Programatorul poate predetermina 탳i seta singur aceste condi탵ii. 

Puterea unui depanator poate varia foarte mult de la o limb캒 la alta. De obicei, limbajele de programare bazate pe un compilator au un program de depanare mai bun dec칙t limbile bazate pe interpre탵i. Limbile cunoscute cu un compilator sunt: C, Java 탳i Cobol. Limbile cu interpret ca baz캒 sunt: HTML, PHP 탳i Javascript. Programatorii dezvolt캒 adesea posibilit캒탵i suplimentare de depanare 칥n aplica탵iile lor. Acest lucru se 칥nt칙mpl캒 deseori cu aplica탵iile SaaS 탳i web. Aplica탵ia este apoi prev캒zut캒 cu o setare suplimentar캒, a탳a-numitul "mod de depanare". Acest lucru poate fi pornit 탳i oprit c칙nd este necesar. C칙nd modul de depanare este "on", programul arat캒: variabilele 탳i con탵inutul lor, stadiile care se aplic캒 칥n acel moment, mesaje de eroare cuprinz캒toare, uneori utilizatorul are mai multe drepturi de a solicita sau de a schimba date, ce alte interese trebuie s캒 arate programatorului. 

Marele avantaj al modului de depanare este c캒 nu ave탵i nevoie de depanator, este vorba de conversia unei institu탵ii. Dar 칥n modul de depanare exist캒 탳i un mare pericol. Con탵inutul informa탵iilor de depanare este foarte interesant pentru hackeri. Datele afi탳ate, cum ar fi numele variabilelor 탳i valorile acestora, spun multe despre func탵ionarea aplica탵iei. Faciliteaz캒 detectarea deficien탵elor 탳i, uneori, este suficient s캒 se introduc캒 un sistem neobservat.  

Deci aveti mare atentie! Si spor la depanat si iar depanat! 游땕 
